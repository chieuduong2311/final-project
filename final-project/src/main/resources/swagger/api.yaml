swagger: "2.0"
info:
  description: ""
  version: "1.0.0"
  title: "Swagger Booking Service 2.0"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhost:8080"
tags:
  - name: "user"
    description: "Operations about user"
  - name: "customer"
    description: "Customer function"
  - name: "driver"
    description: "Driver function"
  - name: "journey"
    description: "Journey controller"
  - name: "call"
    description: "Call management"
schemes:
  - "https"
  - "http"
paths:
  /customer/{phone}/mostPlaces:
    get:
      tags:
        - customer
      summary: Get 5 most places
      operationId: getMostPlaces
      parameters:
        - name: phone
          in: path
          description: customer's phone need to query
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Place'
        '404':
          description: Customer not found
  /customer/{phone}/recentCalls:
    get:
      tags:
        - customer
      summary: Get 5 recent calls
      operationId: getRecentCalls
      parameters:
        - name: phone
          in: path
          description: customer's phone need to query
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Call'
        '404':
          description: Customer not found

  /driver/online/{id}:
    post:
      tags:
        - driver
      summary: Toggle online status
      description: This can only be done by the logged in user.
      operationId: switchToOnlineDriver
      parameters:
        - name: id
          in: path
          description: The id of driver that needs to be turn on
          required: true
          type: string
      responses:
        '200':
          description: Update successfully
        '400':
          description: Invalid username supplied
        '404':
          description: Driver not found
  /driver/offline/{id}:
    post:
      tags:
        - driver
      summary: Toggle offline status
      description: This can only be done by the logged in user.
      operationId: switchToOfflineDriver
      parameters:
        - name: id
          in: path
          description: The id of driver that needs to be turn off
          required: true
          type: string
      responses:
        '200':
          description: Update successfully
        '400':
          description: Invalid username supplied
        '404':
          description: Driver not found
  /driver/register/{id}:
    post:
      tags:
        - driver
      summary: Create new driver
      operationId: registerDriver
      parameters:
        - name: id
          in: path
          description: The id of driver that needs to be turn on
          required: true
          type: string
        - name: body
          in: body
          required: true
          description: Created driver object
          schema:
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Register driver successfully
        '400':
          description: Invalid request
  /driver/sync-location/{id}:
    post:
      tags:
        - driver
      summary: Update current location
      operationId: syncLocation
      parameters:
        - name: id
          in: path
          description: The driver's id that needs to be sync
          required: true
          type: string
        - name: body
          in: body
          required: true
          description: Current lat and long of driver
          schema:
            $ref: '#/definitions/DriverLocation'
      responses:
        '200':
          description: Sync successfully
        '400':
          description: Invalid request

  /user/login:
    post:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      parameters:
        - name: body
          in: body
          required: true
          description: Provide username and password to login
          schema:
            $ref: '#/definitions/LoginInfo'
      responses:
        '200':
          description: successful operation
          headers:
            X-Expires-After:
              description: seconds when token expires
              type: integer
              format: int32
          schema:
            $ref: '#/definitions/LoginResponse'
        '401':
          description: Invalid username/password supplied
  /user/logout/{username}:
    post:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      parameters:
        - name: username
          in: path
          description: The username that needs to be logout
          required: true
          type: string
      responses:
        default:
          description: successful operation
  /user:
    post:
      tags:
        - user
      summary: Create new user
      operationId: createUser
      parameters:
        - name: body
          in: body
          required: true
          description: Created user object
          schema:
            $ref: '#/definitions/User'
      responses:
        default:
          description: successful operation
          schema:
            $ref: '#/definitions/User'
        '400':
          description: Invalid request
    get:
      tags:
        - user
      summary: Get user by phone
      operationId: getUserInfoByPhone
      parameters:
        - name: phone
          in: query
          description: phone of user need to query
          required: true
          type: string
      responses:
        default:
          description: successful operation
          schema:
            $ref: '#/definitions/User'
        '400':
          description: Invalid request
        '404':
          description: User not found
  /user/register:
    post:
      tags:
        - user
      summary: Create a user
      operationId: registerUser
      parameters:
        - name: body
          in: body
          description: Create a user object
          schema:
            $ref: '#/definitions/User'
      responses:
        default:
          description: successful operation
          schema:
            $ref: '#/definitions/User'
        '400':
          description: Invalid request
  /user/{id}:
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: id
          in: path
          description: id of user need to update
          required: true
          type: string
        - name: body
          in: body
          required: true
          description: Update an existent user in application
          schema:
            $ref: '#/definitions/User'
      responses:
        default:
          description: successful operation
          schema:
            $ref: '#/definitions/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          description: The id of user that needs to be deleted
          required: true
          type: string
      responses:
        '200':
          description: Deleted user successfully
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    get:
      tags:
        - user
      summary: Get user by id
      operationId: getUserInfoById
      parameters:
        - name: id
          in: path
          description: The id of user that needs to query
          required: true
          type: string
      responses:
        default:
          description: successful operation
          schema:
            $ref: '#/definitions/User'
        '400':
          description: Invalid request
        '404':
          description: User not found

  /call:
    post:
      tags:
        - call
      summary: Create new call
      operationId: createCall
      parameters:
        - name: body
          in: body
          required: true
          description: Created call object
          schema:
            $ref: '#/definitions/Call'
      responses:
        default:
          description: successful operation
          schema:
            $ref: '#/definitions/Call'
        '400':
          description: Invalid request

  /journey:
    post:
      tags:
        - journey
      summary: Create new journey
      operationId: createJourney
      parameters:
        - name: body
          in: body
          required: true
          description: Created journey object
          schema:
            $ref: '#/definitions/Journey'
      responses:
        default:
          description: successful operation
          schema:
            $ref: '#/definitions/Journey'
        '400':
          description: Invalid request

  /journey/{id}:
    get:
      tags:
        - journey
      summary: Get journey
      description: This can only be done by the logged in user.
      operationId: getJourneyById
      parameters:
        - name: id
          in: path
          description: id of journey
          required: true
          type: string
      responses:
        default:
          description: successful operation
          schema:
            $ref: '#/definitions/Journey'
        '400':
          description: Invalid request
        '404':
          description: Journey not found
  /journey/customer/{id}:
    get:
      tags:
        - journey
      summary: Get in progress journey of customer
      description: This can only be done by the logged in user.
      operationId: getInProgressJourneyByCustomer
      parameters:
        - name: id
          in: path
          description: id of customer
          required: true
          type: string
      responses:
        default:
          description: successful operation
          schema:
            $ref: '#/definitions/Journey'
        '400':
          description: Invalid request
        '404':
          description: Customer not found
  /journey/driver/{id}:
    get:
      tags:
        - journey
      summary: Get in progress journey of driver
      description: This can only be done by the logged in user.
      operationId: getInProgressJourneyByDriver
      parameters:
        - name: id
          in: path
          description: id of driver
          required: true
          type: string
      responses:
        default:
          description: successful operation
          schema:
            $ref: '#/definitions/Journey'
        '400':
          description: Invalid request
        '404':
          description: Driverl not found
    post:
      tags:
        - journey
      summary: Find driver for journey
      description: This can only be done by the logged in user.
      operationId: findDriver
      parameters:
        - name: id
          in: path
          description: id of journey
          required: true
          type: string
      responses:
        '200':
          description: Found driver successfully
        '400':
          description: Invalid request
        '404':
          description: Journey not found

  /journey/{id}/cancel:
    put:
      tags:
        - journey
      summary: Cancel journey
      description: This can only be done by the logged in user.
      operationId: cancelJourney
      parameters:
        - name: id
          in: path
          description: id of journey that need to be cancelled
          required: true
          type: string
        - name: body
          in: body
          required: true
          description: Cancel an existed journey with reason in application
          schema:
            $ref: '#/definitions/Reason'
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid id supplied
        '404':
          description: Journey not found
  /journey/{id}/finish:
    put:
      tags:
        - journey
      summary: End journey
      description: This can only be done by the logged in user.
      operationId: endJourney
      parameters:
        - name: id
          in: path
          description: id of journey that need to be finished
          required: true
          type: string
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid id supplied
        '404':
          description: Journey not found
  /journey/{id}/driver/{driverId}:
    put:
      tags:
        - journey
      summary: Assign driver to journey
      description: This can only be done by the logged in user.
      operationId: assignDriver
      parameters:
        - name: id
          in: path
          description: id of journey that need to be assigned
          required: true
          type: string
        - name: driverId
          in: path
          description: id of driver that need to be assigned
          required: true
          type: string
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid id supplied
        '404':
          description: Journey or driver not found

definitions:
  Place:
    type: object
    properties:
      id:
        type: integer
        format: int64
        example: 1
      placeId:
        type: string
      lat:
        type: number
        format: double
        example: -22.6
      lng:
        type: number
        format: double
        example: 55.2
      placeName:
        type: string
        example:
      fullAddressInString:
        type: string
    required:
      - placeId
      - lat
      - lng
      - fullAddressInString

  Call:
    type: object
    properties:
      id:
        type: integer
        format: int64
        example: 1
      customerId:
        type: integer
        format: int64
      phone:
        type: string
      callType:
        $ref: '#/definitions/CallType'
      vehicleType:
        $ref: '#/definitions/VehicleType'
      origin:
        $ref: '#/definitions/Place'
      destination:
        $ref: '#/definitions/Place'
      dateTime:
        type: integer
        format: int64
    required:
      - customerId
      - phone
      - callType
      - vehicleType
      - origin
      - destination
  Journey:
    type: object
    properties:
      id:
        type: integer
        format: int64
        example: 1
      callId:
        type: integer
        format: int64
      customerId:
        type: integer
        format: int64
      driverId:
        type: integer
        format: int64
      vehicleType:
        $ref: '#/definitions/VehicleType'
      status:
        $ref: '#/definitions/JourneyStatus'
      reason:
        type: string
      phone:
        type: string
      rate:
        type: integer
      origin:
        $ref: '#/definitions/Place'
      destination:
        $ref: '#/definitions/Place'
      startDateTime:
        type: integer
        format: int64
      endDateTime:
        type: integer
        format: int64
      price:
        type: number
        format: double
      paymentMethod:
        $ref: '#/definitions/PaymentMethod'
      pointCode:
        type: string
    required:
      - vehicleType
      - customerId
      - origin
      - phone
      - destination
      - price
      - paymentMethod

  User:
    type: object
    properties:
      id:
        type: integer
        format: int64
        example: 100000
      username:
        type: string
        example: fehguy
      firstName:
        type: string
        example: John
      lastName:
        type: string
        example: James
      email:
        type: string
        example: john@email.com
      password:
        type: string
        example: '12345'
      phone:
        type: string
        example: '12345'
      userType:
        $ref: '#/definitions/UserType'
      userStatus:
        $ref: '#/definitions/UserStatus'
      personalId:
        type: string
      overallRate:
        type: number
        format: double
        example: 4.8
      vehicleInfo:
        $ref: '#/definitions/Vehicle'
    required:
      - username
      - firstName
      - lastName
      - email
      - password
      - phone

  DriverLocation:
    type: object
    properties:
      lat:
        type: number
        format: double
      lng:
        type: number
        format: double
    required:
      - lat
      - lng

  Vehicle:
    type: object
    properties:
      id:
        type: integer
        format: int64
      controlNumber:
        type: string
        example: 51C2-00432
      type:
        $ref: '#/definitions/VehicleType'
    required:
      - controlNumber
      - type

  LoginResponse:
    type: object
    properties:
      id:
        type: integer
        format: int64
      role:
        type: string
      token:
        type: string

  VehicleType:
    type: string
    enum:
      - CAR4
      - CAR7
      - BIKE
  Reason:
    type: string
  LoginInfo:
    type: object
    properties:
      username:
        type: string
      password:
        type: string
    required:
      - username
      - password
  JourneyStatus:
    type: string
    enum:
      - COMPLETED
      - CANCELLED
      - CORRUPTED
      - INPROGRESS
      - INITIALIZED
  PaymentMethod:
    type: string
    enum:
      - CASH
      - CARD
      - EWALLET
  CallType:
    type: string
    enum:
      - MOBILE_CALL
      - WEB_APP
  UserType:
    type: string
    enum:
      - CUSTOMER
      - DRIVER
      - STAFF
  UserStatus:
    type: string
    enum:
      - ACTIVE
      - BLOCKED